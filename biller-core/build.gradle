dependencies {
	compile 'com.google.inject:guice:4.0'
	compile 'com.google.inject.extensions:guice-persist:4.0'
	compile 'com.google.code.gson:gson:2.4'
	compile 'commons-io:commons-io:2.4'
	compile 'javax.validation:validation-api:1.1.0.Final'
	compile 'joda-time:joda-time:2.9'
	compile 'mysql:mysql-connector-java:5.1.37'
	compile 'org.apache.poi:poi-ooxml:3.13'
	compile 'org.apache.bval:bval-guice:0.5'
	compile 'org.eclipse.persistence:eclipselink:2.6.1'
	compile 'org.quartz-scheduler:quartz:2.2.2'
	compile 'org.apache.commons:commons-email:1.4'
	compile 'com.itextpdf:itextpdf:5.5.7'
	compile 'org.slf4j:slf4j-api:'
}

/**
 * Activacion del profile si compilamos con la opcion "-Pprofile=pre"
 */
if (project.hasProperty('profile')) {
    println "Target environment: $profile"
    sourceSets.main.resources.srcDir "src/main/profile/$profile"
} else {
	sourceSets.main.resources.srcDir "src/main/profile/local"
}

// jpa weaving
def entitiesBasePackage = 'com.luckia.biller.core.model'
configurations {
	weave
}
dependencies {
	weave 'org.eclipse.persistence:javax.persistence:2.1.0'
	weave 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.5.2'
}
compileJava {
	destinationDir file("$buildDir/compiled-classes")
}
task copyNonPersistentClasses(type: Copy, dependsOn: compileJava) {
	from "$buildDir/compiled-classes"
	into sourceSets.main.output.classesDir
	exclude '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
	includeEmptyDirs = false
}
task copyPersistentClasses(type: Copy, dependsOn: compileJava) {
  from "$buildDir/compiled-classes"
  into "$buildDir/unwoven-persistent-classes"
  include '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
  includeEmptyDirs = false
}
task weaveJpaEntities(type: JavaExec, dependsOn: [copyPersistentClasses,processResources]) {
	main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
	classpath configurations.weave.incoming.files
	args '-persistenceinfo'
	args processResources.destinationDir.absolutePath
	args '-classpath'
	args configurations.compile.incoming.files.asPath
	args '-loglevel'
	args 'INFO'
	args copyPersistentClasses.destinationDir.absolutePath
	args sourceSets.main.output.classesDir.absolutePath
	inputs.files fileTree(copyPersistentClasses.destinationDir),fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
	outputs.dir sourceSets.main.output.classesDir
}
classes.dependsOn copyNonPersistentClasses,weaveJpaEntities


